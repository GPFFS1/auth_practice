const express = require("express");
const path = require("path");
const User = require("./models/userSchema");
const bcrypt = require("bcrypt");
const mongoose = require("mongoose");
const dotenv = require("dotenv");
const jwt = require("jsonwebtoken");
const cookieParser = require("cookie-parser");

dotenv.config();

main().catch((err) => console.log(err));

async function main() {
  await mongoose.connect(process.env.MONGO_DB_URI);

  console.log("Connected to MongoDB");
}

const app = express();
app.use(cookieParser());
const PORT = process.env.PORT || 3000;

const angularPath = path.join(__dirname, "dist/my-project/browser");

const protectedRoutes = (req, res, next) => {
  const token = req.cookies.token;
  if (!token && !req.url.includes("/signup") && !req.url.includes("/login")) {
    return res.redirect("/login");
  } else if (token) {
    try {
      const decoded = jwt.verify(token, process.env.JWT_SECRET);
      req.userId = decoded.userId;
      next();
    } catch (err) {
      return res.status(401).json({ message: "Unauthorized" });
    }
  } else {
    next();
  }
};

// Point Express to the static files generated by Angular
app.use(express.static(angularPath));

app.use(express.urlencoded({ extended: true }));
app.use(express.json());

app.post("/auth/signup", async (req, res) => {
  const { username, email, password } = req.body;
  const hashedPassword = await bcrypt.hash(password, 10);
  const newUser = new User({ username, email, password: hashedPassword });
  await newUser.save();

  const userId = newUser._id;

  const token = jwt.sign({ userId }, process.env.JWT_SECRET, {
    expiresIn: "30d",
  });

  res.cookie("token", token, {
    httpOnly: true,
    maxAge: 30 * 24 * 60 * 60 * 1000,
  });

  res.json({ message: "Login successful" });
});

app.post("/auth/login", async (req, res) => {
  const { username, password } = req.body;
  const user = await User.findOne({ username });
  const valid = await bcrypt.compare(password, user.password);
  if (valid) {
    const userId = user._id;
    const token = jwt.sign({ userId }, process.env.JWT_SECRET, {
      expiresIn: "30d",
    });

    res.cookie("token", token, {
      httpOnly: true,
      maxAge: 30 * 24 * 60 * 60 * 1000,
    });

    res.json({ message: "Login successful" });
  } else {
    res.status(401).json({ message: "Invalid credentials" });
  }
});

// For any routes not explicitly handled, serve the Angular index.html file
app.get("*", protectedRoutes, (req, res) => {
  res.sendFile(path.join(angularPath, "index.html"));
});

app.listen(PORT, () => {
  console.log(`Server started on port ${PORT}`);
});
